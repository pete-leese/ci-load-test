name: CI-Load-Test-Feature-Branch-Dev

on:
 pull_request:
   branches:
     - main
   types:
     - "edited"
     - "opened"
     - "ready_for_review"
     - "reopened"
     - "synchronize"

env:
  kind_version: 0.11.1
  kubectl_version: 1.27.4
  ingress_version: 1.8.1
  cluster_name: ci-load-test
  node_count: 2
  host: localhost
  bar_path: /bar
  foo_path: /foo
  concurrent_requests: 20
  total_requests: 500
  output_file: load_test_results.txt

jobs:
  ci_load_test:
    runs-on: [self-hosted, macOS]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if kubectl is already installed
        run: |
          if ! command -v kubectl &> /dev/null; then
            echo "kubectl is not installed. Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/v${{ env.kubectl_version }}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          else
            echo "kubectl is already installed."
          fi

      - name: Checking to see if KinD is already installed
        run: |
          if ! command -v kind &> /dev/null; then
            echo "KinD is not installed. Installing KinD..."
            curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v${{ env.kind_version }}/kind-linux-amd64"
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          else
            echo "KinD is already installed."
          fi

      - name: Dynamically build kind-config.yaml
        run: |
          node_count=${{ env.node_count }}
          yaml_content="kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              kubeadmConfigPatches:
              - |
                kind: InitConfiguration
                nodeRegistration:
                  kubeletExtraArgs:
                    node-labels: \"ingress-ready=true\"
              extraPortMappings:
              - containerPort: 80
                hostPort: 80
                protocol: TCP
              - containerPort: 443
                hostPort: 443
                protocol: TCP"
                    for ((i=1; i<=node_count; i++)); do
                      yaml_content+="\n- role: worker"
                    done
                    echo -e "$yaml_content" > kind-config.yaml
                    echo "YAML file 'kind-config.yaml' has been created with $node_count worker node(s)."

      - name: Set up Kubernetes cluster with KinD
        id: create_k8s_cluster
        run: |
          if ! kind get clusters | grep -q ${{ env.cluster_name }}; then
            echo "Creating KinD cluster..."
            kind create cluster --name ${{ env.cluster_name }} --config kind-config.yaml
          else
            echo "KinD cluster '${{ env.cluster_name }}' already exists."
          fi

      - name: Install Ingress controller
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v${{ env.ingress_version }}/deploy/static/provider/kind/deploy.yaml

      - name: Deploy http-echo deployments
        run: kubectl apply -f http-echo-bar.yaml && kubectl apply -f http-echo-foo.yaml

      - name: Wait for Ingress to be deployed
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s

      - name: Wait for http-echo to be deployed
        run: |
          kubectl wait --for=condition=ready pod -l metadata=http-echo --timeout=90s

      - name: Run load test and write output to file
        run: |
          CONCURRENT_REQUESTS=${{ env.concurrent_requests }}
          TOTAL_REQUESTS=${{ env.total_requests }}
          OUTPUT_FILE=${{ env.output_file }}

          run_load_test() {
              local host="$1"
              local path="$2"

              echo "Running load test for http://${host}${path}"
              ab -n ${TOTAL_REQUESTS} -c ${CONCURRENT_REQUESTS} "http://${host}${path}" > $OUTPUT_FILE
              echo "Load test for http://${host}${path} completed. Results written to $OUTPUT_FILE"
          }

          # Start the load testing and write output to file
          run_load_test "${{ env.host }}" "${{ env.bar_path }}"
          run_load_test "${{ env.host }}" "${{ env.foo_path }}"
